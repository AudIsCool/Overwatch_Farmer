/**
Live Settings - settings
**/

settings{
	main
	{
		Description: "Aud's Stats Farmer, built off of Seita's Scrim Lobby (Version 1.22) | For updates on this code: https://twitter.com/MrCoachAud || https://github.com/audiscool/OW_LobbyCodes/OW_SeitaStatsFarm. For updates on Seita's lobby go to https://twitter.com/Seita"
	}

	lobby
	{
		Max Spectators: 12
	}

	modes
	{
		Assault
		{
			enabled maps
			{
			}
		}

		Control
		{
			Score To Win: 3

			enabled maps
			{
				Lijiang Tower
			}
		}

		Escort
		{
			enabled maps
			{
			}
		}

		Hybrid
		{
			enabled maps
			{
			}
		}

		General
		{
			Competitive Rules: On
			Game Mode Start: Immediately
			Kill Cam: Off
			Limit Roles: 2 Of Each Role Per Team
			Skins: Off
		}
	}
}



/**
Dev - Settings

settings
{
	main
	{
		Description: "Aud's Stats Farmer, built off of Seita's Scrim Lobby (Version 1.22) | For updates on this code: https://twitter.com/MrCoachAud || https://github.com/audiscool/OW_LobbyCodes/OW_SeitaStatsFarm. For updates on Seita's lobby go to https://twitter.com/Seita"
	}

	lobby
	{
		Max Spectators: 12
	}

	modes
	{
		disabled Assault
		{
			Competitive Rules: On
		}

		disabled Control
		{
			Competitive Rules: On
			Score To Win: 3
		}

		disabled Escort
		{
			Competitive Rules: On
		}

		disabled Hybrid
		{
			Competitive Rules: On
		}

		Practice Range

		General
		{
			Game Mode Start: Immediately
			Hero Limit: 2 Per Team
			Kill Cam: Off
			Limit Roles: 2 Of Each Role Per Team
			Skins: Off
		}
	}

	heroes
	{
		General
		{
			Spawn With Ultimate Ready: On
		}
	}
}
**/


variables
{
	global:
		0: Team1Ready
		1: Team2Ready
		2: GameMode
		3: ScoreModified
		4: TimeCooldown
		5: BreakCooldown
		6: T1ReadyCD
		7: T2ReadyCD
		8: Team1Hud
		10: HelpHud
		11: Team2Hud
		17: FirstRoundDone
		20: Disconnect
		21: DcSlot
		22: DcTeam
		23: UltChargeLoop
		24: UltChargeTable

	player:
		0: DamageDone
		1: HealingDone
		2: UltsUsed
		3: Deaths
		4: DamageTaken
		5: HeroList
		6: Duplication
}

rule("Seita Scrim lobby")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		//Disable Inspector Recording;
		Global.Team1Hud[0] = -1;
		Global.Team1Hud[1] = -1;
		Global.Team1Hud[2] = -1;
		Global.Team2Hud[0] = -1;
		Global.Team2Hud[1] = -1;
		Global.Team2Hud[2] = -1;
		Global.HelpHud[0] = -1;
		Global.HelpHud[1] = -1;
		Global.HelpHud[2] = -1;
		Global.HelpHud[3] = -1;
		Global.HelpHud[4] = -1;
		Global.HelpHud[5] = -1;
		Global.HelpHud[6] = -1;
		Global.HelpHud[7] = -1;
		Global.HelpHud[8] = -1;
		Global.HelpHud[9] = -1;
		Global.HelpHud[10] = -1;
	}
}

rule("Remove Assembling Heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
		Wait(5, Ignore Condition);
		Set Match Time(10);
	}
}

rule("Help HUD at the start of the game")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
        /**
        * Info Texts
        *    - Stats are only for specs
        *    - How Stats work | Tanks & DPS
        *    - How Stats work | Supports
        **/

        //Stats are only for specs
		Create HUD Text(Null, Null, Custom String("Statistics are only shown to Spectators"), Null, Right, 28, Color(White), Color(Aqua), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[6] = Last Text ID;

        //How stats work | DPS & Tanks
		Create HUD Text(Null, Null, Custom String("DPS&Tanks: Damage Done - Damage Taken - Ults used  - Deaths"), Null, Right, 29, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[7] = Last Text ID;

        //How Stats work | Supports
		Create HUD Text(Null, Null, Custom String("Supports: Damage Done - Healing Done - Ults used - Deaths"), Null, Right, 30, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[8] = Last Text ID;



		/**
        * Control Texts
        *    - Controls | Ready Up
        *    - Controls | Add Seconds
        *    - Controls | Add Mins
        *    - Controls | Teleport
        *    - Controls | Change Heroes
        **/

        //Ready Intro Text
        Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} + {1}: Ready (or cancel Ready)", Null, Input Binding String(Button(Interact)), Input Binding String(Button(Crouch))), Null, Right, 22, Color(White), Color(Aqua), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[2] = Last Text ID;

        //Add Seconds
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} : adds extra 20 seconds to setup", Input Binding String(Button(Ultimate))), Null, Right, 23, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[3] = Last Text ID;

        //Add 5 mins
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} + {1}: Adds 5 min break timer", Input Binding String(Button(Interact)), Input Binding String(Button(Ultimate))), Null, Right, 24, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[4] = Last Text ID;

        //Teleport Prompt BROKEN BELOW "EXPECTED ( AFTER OR"
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} : Teleport (works only in Defense, in spawn)", Input Binding String(Button(Melee))), Null, Right, 25, Color(White), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[9] = Last Text ID;

        //Change heroes
		Create HUD Text(All Players(All Teams), Null, Custom String("Hold {0} : Change hero (works only in Defense)", Input Binding String(Button(Reload))), Null, Right, 26, Color(White), Color(Yellow), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[10] = Last Text ID;

        /**
        * Barrier Texts?
        *    Ask SEITA!!!!
        **/ 
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, 20, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
        Global.HelpHud[0] = Last Text ID;
	
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, 21, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
        Global.HelpHud[1] = Last Text ID;

		Create HUD Text(Null, Null, Null, Custom String(" "), Right, 27, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[5] = Last Text ID;

	}
}

rule("Game in Progress: Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
        //Log to Inspector
        Log to Inspector(Custom String("[ROUND_START] Started Round: {0} on Map: {1}", Current Map, Match Round));

		Global.Team1Ready = False;
		Global.Team2Ready = False;
		Global.TimeCooldown = 0;
		Global.BreakCooldown = 0;
		Global.T1ReadyCD = 0;
		Global.T2ReadyCD = 0;
		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
		Destroy HUD Text(Global.HelpHud[0]);
		Destroy HUD Text(Global.HelpHud[1]);
		Destroy HUD Text(Global.HelpHud[2]);
		Destroy HUD Text(Global.HelpHud[3]);
		Destroy HUD Text(Global.HelpHud[4]);
		Destroy HUD Text(Global.HelpHud[5]);
		Destroy HUD Text(Global.HelpHud[6]);
		Destroy HUD Text(Global.HelpHud[7]);
		Destroy HUD Text(Global.HelpHud[8]);
		Destroy HUD Text(Global.HelpHud[9]);
		Destroy HUD Text(Global.HelpHud[10]);

	}
}

rule("Game not in progress: Tell log game done"){
    event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress != True;
	}

    actions{
        Log To Inspector(Custom String("[Round_End]", Null, Null, Null));
    }
}


rule("Both Teams Ready: Match starts in 5 sec, Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == True;
		Global.Team2Ready == True;
	}

	actions
	{
		Set Match Time(5);
		Wait(1, Ignore Condition);
		Global.Team1Ready = False;
		Global.Team2Ready = False;
		Global.TimeCooldown = 0;
		Global.BreakCooldown = 0;
		Global.T1ReadyCD = 0;
		Global.T2ReadyCD = 0;

		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
		Destroy HUD Text(Global.HelpHud[0]);
		Destroy HUD Text(Global.HelpHud[1]);
		Destroy HUD Text(Global.HelpHud[2]);
		Destroy HUD Text(Global.HelpHud[3]);
		Destroy HUD Text(Global.HelpHud[4]);
		Destroy HUD Text(Global.HelpHud[5]);
		Destroy HUD Text(Global.HelpHud[6]);
		Destroy HUD Text(Global.HelpHud[7]);
		Destroy HUD Text(Global.HelpHud[8]);
		Destroy HUD Text(Global.HelpHud[9]);
		Destroy HUD Text(Global.HelpHud[10]);

        //Print out what round we're on
        //Log to Inspector(Custom String("[ROUND_START] Started Round: {0} on Map: {1}", Current Map, Match Round));

        
	}
}

rule("Ultimate: +20s match time while in setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time >= 1;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == False;
		Global.TimeCooldown == 0;
	}

	actions
	{
		Global.TimeCooldown = 2;
		Set Match Time(Match Time + 20);
		Chase Global Variable At Rate(TimeCooldown, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("added 20 seconds")));
	}
}

rule("Interact + Ultimate: +5min match time while in setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time >= 1;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.BreakCooldown == 0;
	}

	actions
	{
		Global.BreakCooldown = 10;
		Global.TimeCooldown = 10;
		Set Match Time(Match Time + 300);
		Chase Global Variable At Rate(BreakCooldown, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(TimeCooldown, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("added 5 mins")));
	}
}

rule("Crouch + Interact: Team 1 Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team1Ready == False;
		Global.T1ReadyCD == 0;
	}

	actions
	{
		Global.T1ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team1Ready = True;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
	}
}

rule("Crouch + Interact: Team 1 Not Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team1Ready == True;
		Global.T1ReadyCD == 0;
	}

	actions
	{
		Global.T1ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team1Ready = False;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
	}
}

rule("Crouch + Interact: Team 2 Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team2Ready == False;
		Global.T2ReadyCD == 0;
	}

	actions
	{
		Global.T2ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team2Ready = True;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
	}
}

rule("Crouch + Interact: Team 2 Not Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team2Ready == True;
		Global.T2ReadyCD == 0;
	}

	actions
	{
		Global.T2ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team2Ready = False;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
	}
}

rule("HUD: Team 1 Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 1), Custom String("Your team is ready"), Null, Null, Top, 20, Color(Green), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team1Hud[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Enemy team is ready"), Null, Null, Top, 20, Color(Red), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team1Hud[1] = Last Text ID;
		Create HUD Text(Null, Custom String("Blue team is ready"), Null, Null, Top, 0, Color(Blue), Color(White), Color(White), Visible To and String,
			Visible Always);
		Global.Team1Hud[2] = Last Text ID;
	}
}

rule("HUD: Team 1 Not Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == False;
	}

	actions
	{
		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
	}
}

rule("HUD: Team 2 Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team2Ready == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 2), Custom String("Your team is ready"), Null, Null, Top, 20, Color(Green), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team2Hud[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Enemy team is ready"), Null, Null, Top, 20, Color(Red), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team2Hud[1] = Last Text ID;
		Create HUD Text(Null, Custom String("Red team is ready"), Null, Null, Top, 0, Color(Red), Color(White), Color(White), Visible To and String,
			Visible Always);
		Global.Team2Hud[2] = Last Text ID;
	}
}

rule("HUD: Team 2 Not Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team2Ready == False;
	}

	actions
	{
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
	}
}

disabled rule("Scoreboard")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Damage Done & Taken")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Victim != Event Player;
	}

	actions
	{
        //Update Internal
		Event Player.DamageDone += Event Damage;
		Victim.DamageTaken += Event Damage;

        //Update Log
		//Log to Inspector(Custom String("[PLAYER_DAMAGE] Player {0} damaged player {1} for {2}", Event Player, Victim, Event Damage));

	}
}

rule("Healing Done")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.HealingDone += Event Healing;
	}
}

rule("Ults used not echo or dva")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) != Hero(D.Va);
		Hero Of(Event Player) != Hero(Echo);
	}

	actions
	{
		//Increase Ult Count
        Event Player.UltsUsed += 1;

        //log ult
        Log To Inspector(Custom String("[Ultimate Used] Player {0} used {1}", Event Player, Hero Of(Event Player), Null));

	}
}

rule("Echo Ult Used")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Duplicating(Event Player)    != True;
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Echo);
	}

	actions
	{
        //log ult
        Log To Inspector(Custom String("[Echo Ultimate Used] Player {0} used {1}", Event Player, Event Ability, Null));

		Event Player.UltsUsed += 1;
		Wait(16, Ignore Condition);

	}
}


//Fired on End of Dup
rule("Echo Dup Ult Used"){
    event{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Duplicating(Event Player) == True;
		Hero Of(Event Player) == Hero(Echo);

	}

	actions
	{

		//Wait then fetch duplication
		//Wait(16, Ignore Condition);

		//Abort if not a dup
		//Abort If(Compare(Hero Being Duplicated(Event Player), ==, 0));

		//Log Dup
		Event Player.UltsUsed += 1;
        Log To Inspector(Custom String("[Echo Duplication] Player {0} duplicated {1}", Event Player, Hero Being Duplicated(Event Player), Null));



	}
}



rule("Ults used dva")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(D.Va);
	}

	actions
	{
        //log 
        Log To Inspector(Custom String("[Ultimate Used] Player {0} used {1}", Event Player, Event Ability, Null));

		Wait(2.500, Abort When False);
		Event Player.UltsUsed += 1;
	}
}

//Yeah Idk why Seita doesn't track seita
rule("Kills"){
    event{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		//Log player kill
        Log to Inspector(Custom String("[PLAYER_KILL] {0} Killed {1} using {2}", Event Player, Victim, Event Ability));
	}
}

rule("Deaths | Normal")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.Deaths += 1;
	}
}


rule("Suicide | Off Cliff"){
    event{
        Player Died;
        All;
        All;
    }

    conditions{
        Is Game In Progress == True;
        Event Was Environment == True;
    }

    actions{
        Log To Inspector(Custom String("[ENVRIONMENTAL_DEATH] Player {0}", Event Player, Null, Null));

    }

}

rule("Suicide | Casually"){
    event{
        Player Died;
        All;
        All;
    }

    conditions{
        Is Game In Progress == True;
        Event Player == Attacker;
    }

    actions{
        Log To Inspector(Custom String("[SUICIDE] Player {0}", Event Player, Null, Null));

    }

}

//Track switches in comps
rule("Hero Swicthes"){
    event {
        Ongoing - Each Player;
        All; 
        All;
    }

    conditions{
        Hero Of(Event Player) != Player Variable(Event Player, H);
    }

    actions{
        //Save new hero
        Event Player.H = 0;

        //Log 
        Log To Inspector(Custom String("[HERO_SWITCH] Player {0} switched to {1}", Event Player, Hero Of(Event Player), Null));
    

    }
}



//DISABLED TO SAVE SERVER RESOURCES
disabled rule("Left Side Scoreboard")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(0, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(0, Team 1))) == True ? Round To Integer(Players In Slot(0, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(0, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(0, Team 1)
			.UltsUsed, Players In Slot(0, Team 1).Deaths))), Left, 1, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(1, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(1, Team 1))) == True ? Round To Integer(Players In Slot(1, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(1, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(1, Team 1)
			.UltsUsed, Players In Slot(1, Team 1).Deaths))), Left, 2, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(2, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(2, Team 1))) == True ? Round To Integer(Players In Slot(2, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(2, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(2, Team 1)
			.UltsUsed, Players In Slot(2, Team 1).Deaths))), Left, 3, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(3, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(3, Team 1))) == True ? Round To Integer(Players In Slot(3, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(3, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(3, Team 1)
			.UltsUsed, Players In Slot(3, Team 1).Deaths))), Left, 4, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(4, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(4, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(4, Team 1))) == True ? Round To Integer(Players In Slot(4, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(4, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(4, Team 1)
			.UltsUsed, Players In Slot(4, Team 1).Deaths))), Left, 5, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(5, Team 1))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(5, Team 1).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(5, Team 1))) == True ? Round To Integer(Players In Slot(5, Team 1).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(5, Team 1).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(5, Team 1)
			.UltsUsed, Players In Slot(5, Team 1).Deaths))), Left, 6, Color(White), Color(White), Color(Blue), Visible To and String, Visible Always);
	}
}

//DISABLED TO SAVE SERVER RESOURCES
disabled rule("Right Side Scoreboard")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(0, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(0, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(0, Team 2))) == True ? Round To Integer(Players In Slot(0, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(0, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(0, Team 2)
			.UltsUsed, Players In Slot(0, Team 2).Deaths))), Right, 1, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(1, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(1, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(1, Team 2))) == True ? Round To Integer(Players In Slot(1, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(1, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(1, Team 2)
			.UltsUsed, Players In Slot(1, Team 2).Deaths))), Right, 2, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(2, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(2, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(2, Team 2))) == True ? Round To Integer(Players In Slot(2, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(2, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(2, Team 2)
			.UltsUsed, Players In Slot(2, Team 2).Deaths))), Right, 3, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(3, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(3, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(3, Team 2))) == True ? Round To Integer(Players In Slot(3, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(3, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(3, Team 2)
			.UltsUsed, Players In Slot(3, Team 2).Deaths))), Right, 4, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(4, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(4, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(4, Team 2))) == True ? Round To Integer(Players In Slot(4, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(4, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(4, Team 2)
			.UltsUsed, Players In Slot(4, Team 2).Deaths))), Right, 5, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
		Create HUD Text(Null, Null, Null, String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(5, Team 2))), String(
			"{0} - {1} - {2}", Round To Integer(Players In Slot(5, Team 2).DamageDone, To Nearest), Array Contains(All Support Heroes,
			Hero Of(Players In Slot(5, Team 2))) == True ? Round To Integer(Players In Slot(5, Team 2).HealingDone, To Nearest)
			: Round To Integer(Players In Slot(5, Team 2).DamageTaken, To Nearest), String("{0} - {1}", Players In Slot(5, Team 2)
			.UltsUsed, Players In Slot(5, Team 2).Deaths))), Right, 6, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
	}
}

//DISABLED TO SAVE SERVER RESOURCES
disabled rule("Setting Score after failed attacks")
{
	event
	{
		Ongoing - Global;
	}
}

//DISABLED TO SAVE SERVER RESOURCES
rule("First attack done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Between Rounds == True;
		Is Team On Offense(Team 2) == True;
		Global.ScoreModified == 0;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Global.FirstRoundDone = True;
	}
}

rule("Set Team Score: Escort & Hybrid")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.FirstRoundDone == True;
		Global.GameMode == 1;
	}

	actions
	{
		Set Team Score(Team 2, 3);
		Global.ScoreModified = 1;
	}
}

rule("Set Team Score: Assault")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.FirstRoundDone == True;
		Global.GameMode == 2;
	}

	actions
	{
		Set Team Score(Team 2, 2);
		Global.ScoreModified = 1;
	}
}

rule("Game Mode check: Escort")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Escort);
	}

	actions
	{
		Global.GameMode = 1;
	}
}

rule("Game Mode check: Hybrid")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Hybrid);
	}

	actions
	{
		Global.GameMode = 1;
	}
}

rule("Game Mode check: Assault")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Assault);
	}

	actions
	{
		Global.GameMode = 2;
	}
}

rule("Game Mode check: Control")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Control);
	}

	actions
	{
		Global.GameMode = 3;
	}
}

rule("Teleports for Defense team")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Hold Reload: Change hero for Defense team")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Is Team On Defense(Team Of(Event Player)) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
		Match Time >= 1;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Small Message(Event Player, Custom String("keep holding reload to change hero"));
		Wait(0.700, Abort When False);
		Event Player.HeroList = All Heroes;
		Modify Player Variable(Event Player, HeroList, Remove From Array By Value, Hero Of(Event Player));
		Set Player Allowed Heroes(Event Player, Event Player.HeroList);
		Wait(0.100, Ignore Condition);
		Set Player Allowed Heroes(Event Player, All Heroes);
	}
}

rule("Press Melee: Blizz World (Press Melee for all of the maps)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Blizzard World);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-8.171, 3.824, 65.861));
	}
}

rule("Eichen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Eichenwalde);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(13.226, 12.981, -83.655));
	}
}

rule("Hollywood")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Hollywood);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-19.248, 8.007, -9.802));
	}
}

rule("Kings")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(King's Row);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-37.185, 10.346, -15.058));
	}
}

rule("Numbani")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Numbani);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(93.044, 5.530, -22.723));
	}
}

rule("Hanamura")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Hanamura);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(13.079, 1.346, -24.267));
	}
}

rule("Horizon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Horizon Lunar Colony);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(42.356, 15.840, -79.798));
	}
}

rule("Paris")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Paris);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-40.379, 16.500, -14.259));
	}
}

rule("Anubis")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Temple of Anubis);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-23.909, 3.312, 46.940));
	}
}

rule("Volskaya")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Volskaya Industries);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-35.545, -1.433, 73.561));
	}
}

rule("Dorado")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Dorado);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(57.088, 9.241, -16.884));
	}
}

rule("Havana")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Havana);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-18.059, 9.184, -70.117));
	}
}

rule("Junkertown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Junkertown);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-28.382, 14.223, -68.289));
	}
}

rule("Rialto")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Rialto);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(55.603, 2.452, -44.947));
	}
}

rule("Route")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Route 66);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(33.662, 10.325, -5.514));
	}
}

rule("Gibraltar")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Watchpoint: Gibraltar);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(32.488, 4.692, -71.941));
	}
}

disabled rule("Ultimate Charge on Disconnect (code copied directly from easyScrims by MrPig100 and MrMoustachioo)")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("=> realize any DC")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.Disconnect[1] = True;
	}
}

disabled rule("=> identify dc'd player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Global.DcSlot = Slot Of(Event Player);
		Global.DcTeam = Team Of(Event Player);
		Global.Disconnect[2] = True;
	}
}

disabled rule("=> set ult charge of last dc'd player all Teams")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Disconnect[1] == True;
		Global.Disconnect[2] == True;
		Hero Of(Players In Slot(Global.DcSlot, Global.DcTeam)) != False;
	}

	actions
	{
		Skip If(Global.DcTeam == Team 2, 2);
		Set Ultimate Charge(Players In Slot(Global.DcSlot, Global.DcTeam), Global.UltChargeTable[Global.DcSlot]);
		Skip(1);
		Set Ultimate Charge(Players In Slot(Global.DcSlot, Global.DcTeam), Global.UltChargeTable[Global.DcSlot + 6]);
		Wait(0.250, Ignore Condition);
		Global.Disconnect[1] = 0;
		Global.Disconnect[2] = 0;
		Global.DcSlot = 0;
		Global.DcTeam = 0;
	}
}

disabled rule("=> 1st block short ult charge gather")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UltChargeLoop > 3;
		Global.Disconnect[1] == 0;
	}

	actions
	{
		Global.UltChargeTable[0] = Ultimate Charge Percent(Players In Slot(0, Team 1));
		Global.UltChargeTable[1] = Ultimate Charge Percent(Players In Slot(1, Team 1));
		Global.UltChargeTable[2] = Ultimate Charge Percent(Players In Slot(2, Team 1));
		Chase Global Variable Over Time(UltChargeLoop, 0, 4, Destination and Duration);
	}
}

disabled rule("=> 2nd block short ult charge gather")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UltChargeLoop > 2;
		Global.Disconnect[1] == 0;
	}

	actions
	{
		Global.UltChargeTable[3] = Ultimate Charge Percent(Players In Slot(3, Team 1));
		Global.UltChargeTable[4] = Ultimate Charge Percent(Players In Slot(4, Team 1));
		Global.UltChargeTable[5] = Ultimate Charge Percent(Players In Slot(5, Team 1));
	}
}

disabled rule("=> 3rd block short ult charge gather")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UltChargeLoop > 1;
		Global.Disconnect[1] == 0;
	}

	actions
	{
		Global.UltChargeTable[6] = Ultimate Charge Percent(Players In Slot(0, Team 2));
		Global.UltChargeTable[7] = Ultimate Charge Percent(Players In Slot(1, Team 2));
		Global.UltChargeTable[8] = Ultimate Charge Percent(Players In Slot(2, Team 2));
	}
}

disabled rule("=> 4th block and loop short ult charge gather")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UltChargeLoop == 0;
		Global.Disconnect[1] == 0;
	}

	actions
	{
		Global.UltChargeTable[9] = Ultimate Charge Percent(Players In Slot(3, Team 2));
		Global.UltChargeTable[10] = Ultimate Charge Percent(Players In Slot(4, Team 2));
		Global.UltChargeTable[11] = Ultimate Charge Percent(Players In Slot(5, Team 2));
		Global.UltChargeLoop = 4;
	}
}
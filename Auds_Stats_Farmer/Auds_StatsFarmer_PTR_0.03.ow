/**
Live Settings - settings
**/
settings{
	main{
		Description: "Aud's Stats Farmer V0.0.1, built off of Seita's Scrim Lobby (Version 1.22) | For updates on this code: https://twitter.com/MrCoachAud || https://github.com/audiscool/OW_LobbyCodes/OW_SeitaStatsFarm. For updates on Seita's lobby go to https://twitter.com/Seita"
	}

	lobby{
		Max Spectators: 12
	}

	modes{
		Assault{
			enabled maps{
			}
		}

		Control{
			Score To Win: 3

			enabled maps{
			}
		}

		Escort{
			enabled maps
			{
			}
		}

		Hybrid{
			enabled maps
			{
				King's Row
			}
		}

		General{
			Competitive Rules: On
			Game Mode Start: Immediately
			Kill Cam: Off
			Limit Roles: 2 Of Each Role Per Team
			Skins: Off
		}
	}

	
	heroes{
		General{
			Spawn With Ultimate Ready: On
		}
	}
}



/**
Dev - Settings
settings
{
	main
	{
		Description: "Aud's Stats Farmer, built off of Seita's Scrim Lobby (Version 1.22) | For updates on this code: https://twitter.com/MrCoachAud || https://github.com/audiscool/OW_LobbyCodes/OW_SeitaStatsFarm. For updates on Seita's lobby go to https://twitter.com/Seita"
	}

	lobby
	{
		Max Spectators: 12
	}

	modes
	{
		disabled Assault
		{
			Competitive Rules: On
		}

		disabled Control
		{
			Competitive Rules: On
			Score To Win: 3
		}

		disabled Escort
		{
			Competitive Rules: On
		}

		disabled Hybrid
		{
			Competitive Rules: On
		}

		Practice Range

		General
		{
			Game Mode Start: Immediately
			Hero Limit: 2 Per Team
			Kill Cam: Off
			Limit Roles: 2 Of Each Role Per Team
			Skins: Off
		}
	}

	heroes
	{
		General
		{
			Spawn With Ultimate Ready: On
		}
	}
}
**/


//Intro Variables that allow us to run the game
variables
{
	global:
		0: Team1Ready
		1: Team2Ready
		2: GameMode
		3: ScoreModified
		4: TimeCooldown
		5: BreakCooldown
		6: T1ReadyCD
		7: T2ReadyCD
		8: Team1Hud
		10: HelpHud
		11: Team2Hud
		17: FirstRoundDone
		20: Disconnect
		21: DcSlot
		22: DcTeam
		23: UltChargeLoop
		24: UltChargeTable
		25: WhoControlsPoint
		26: CaptureProgress
		27: AttackingTeam
		28: DefendingTeam
		29: UpdateTeamsNeedSide
		30: Fight
		//25: Positions
		//26: PositionCount

	player:
		0: DamageDone
		1: HealingDone
		2: UltsUsed
		3: Deaths
		4: DamageTaken
		5: HeroList
		6: RezTarget
		7: MaxHP
		8: H
		9: HealingReceived
		10: HealingSelf
}


/**
* Info Collection 
*     The code below allows us to grab info about the game
*     and reset internal values once the game starts
**/
rule("Game in Progress: Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		//Edit Globals
		Global.UpdateTeamsNeedSide = True;
		Global.WhoControlsPoint = Control Mode Scoring Team;
		Global.CaptureProgress = Objective Position(Objective Index);

		Global.Team1Ready = False;
		Global.Team2Ready = False;

		Global.TimeCooldown = 0;
		Global.BreakCooldown = 0;

		Global.T1ReadyCD = 0;
		Global.T2ReadyCD = 0;

		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
		Destroy HUD Text(Global.HelpHud[0]);
		Destroy HUD Text(Global.HelpHud[1]);
		Destroy HUD Text(Global.HelpHud[2]);
		Destroy HUD Text(Global.HelpHud[3]);
		Destroy HUD Text(Global.HelpHud[4]);
		Destroy HUD Text(Global.HelpHud[5]);
		Destroy HUD Text(Global.HelpHud[6]);
		Destroy HUD Text(Global.HelpHud[7]);
		Destroy HUD Text(Global.HelpHud[8]);
		Destroy HUD Text(Global.HelpHud[9]);
		Destroy HUD Text(Global.HelpHud[10]);


		//Wait to make sure everyone's in lobby
		wait(2.500, Ignore Condition);

		//Log out what version we're on 
		Log To Inspector(Custom String("[VERSION] We're on version [0.0.1]", Null, Null, Null));

		//If On Control don't log out the attacker and defender, just log teams
		Skip If(Current Game Mode != Game Mode(Control), 2);
		Log To Inspector(
			Custom String("[ROUND_START] Started Round on Map {0} Stage {1} with Teams {2}",
				//Map
				Current Map,

				//Stage
				Objective Index,

				//Teams 
				Custom String("[{0} , {1}]", 
					//Team One
					Custom String("{0} : {1} {2}",
						Global.AttackingTeam,

						//Player List
						Custom String("[{0}, {1}]",
							Custom String("{0}, {1}, {2}", Players In Slot(0, Team 1), Players In Slot(1, Team 1), Players In Slot(2, Team 1)),

							Custom String("{0}, {1}, {2}", Players In Slot(3, Team 1), Players In Slot(4, Team 1), Players In Slot(5, Team 1)),

							Null 
						),

						//Hero List
						Custom String("[{0}, {1}]",
							Custom String("{0}, {1}, {2}", Hero of(Players In Slot(0, Team 1)), Hero of(Players In Slot(1, Team 1)), Hero of(Players In Slot(2, Team 1))),

							Custom String("{0}, {1}, {2}", Hero of(Players In Slot(3, Team 1)), Hero of(Players In Slot(4, Team 1)), Hero of(Players In Slot(5, Team 1))),

							Null 
						)


					),

					//Team Two
					Custom String("{0} : {1} {2}",
						Global.DefendingTeam,

						//Player List
						Custom String("[{0}, {1}]",
							Custom String("{0}, {1}, {2}", Players In Slot(0, Team 2), Players In Slot(1, Team 2), Players In Slot(2, Team 2)),

							Custom String("{0}, {1}, {2}", Players In Slot(3, Team 2), Players In Slot(4, Team 2), Players In Slot(5, Team 2)),

							Null 
						),

						//Hero List
						Custom String("[{0}, {1}]",
							Custom String("{0}, {1}, {2}", Hero of(Players In Slot(0, Team 2)), Hero of(Players In Slot(1, Team 2)), Hero of(Players In Slot(2, Team 2))),

							Custom String("{0}, {1}, {2}", Hero of(Players In Slot(3, Team 2)), Hero of(Players In Slot(4, Team 2)), Hero of(Players In Slot(5, Team 2))),

							Null 
						)
					),

					Null
				)
			
			
			)
		);

		//Exit so the second log doesn't fire
		Abort();

		//If on any other type that contains attacker and defender log out those teams
		Log To Inspector(
		Custom String("[ROUND_START] Started Round on Map {0} with Teams {2}",
			//Map
			Current Map,

			//Not tracking stage outside of Koth
			Null,

			//Teams 
			Custom String("[Attacker: {0} , Defender: {1}]", 
				//Team One
				Custom String("{0} : {1} {2}",
					Global.AttackingTeam,

					//Player List
					Custom String("[{0}, {1}]",
						Custom String("{0}, {1}, {2}", Players In Slot(0, Global.AttackingTeam), Players In Slot(1, Global.AttackingTeam), Players In Slot(2, Global.AttackingTeam)),

						Custom String("{0}, {1}, {2}", Players In Slot(3, Global.AttackingTeam), Players In Slot(4, Global.AttackingTeam), Players In Slot(5, Global.AttackingTeam)),

						Null 
					),

					//Hero List
					Custom String("[{0}, {1}]",
						Custom String("{0}, {1}, {2}", Hero of(Players In Slot(0, Global.AttackingTeam)), Hero of(Players In Slot(1, Global.AttackingTeam)), Hero of(Players In Slot(2, Global.AttackingTeam))),
						Custom String("{0}, {1}, {2}", Hero of(Players In Slot(3, Global.AttackingTeam)), Hero of(Players In Slot(4, Global.AttackingTeam)), Hero of(Players In Slot(5, Global.AttackingTeam))),
						Null 
					)
				),
				//Team Two
				Custom String("{0} : {1} {2}",
					Global.DefendingTeam,

					//Player List
					Custom String("[{0}, {1}]",
						Custom String("{0}, {1}, {2}", Players In Slot(0, Global.DefendingTeam), Players In Slot(1, Global.DefendingTeam), Players In Slot(2, Global.DefendingTeam)),

						Custom String("{0}, {1}, {2}", Players In Slot(3, Global.DefendingTeam), Players In Slot(4, Global.DefendingTeam), Players In Slot(5, Global.DefendingTeam)),

						Null 
					),


					//Hero List
					Custom String("[{0}, {1}]",
						Custom String("{0}, {1}, {2}", Hero of(Players In Slot(0, Global.DefendingTeam)), Hero of(Players In Slot(1, Global.DefendingTeam)), Hero of(Players In Slot(2, Global.DefendingTeam))),
						Custom String("{0}, {1}, {2}", Hero of(Players In Slot(3, Global.DefendingTeam)), Hero of(Players In Slot(4, Global.DefendingTeam)), Hero of(Players In Slot(5, Global.DefendingTeam))),
						Null 
					)
				),

				Null
			)
		
		
		)
	);

	}
}

/**	
* Statistics Collection
*	The code below allows us to pull data from the game and log it
*	We track: 
*       - Damage              (Seita)
*       - Healing             (Seita)
*       - Final Blows         (Us)
*       - Ults                (Seita and Us)
*       - Suicides            (us)
*       - Environmental Kills (Us)
**/
//Tracks Damages
rule("Damage Done & Taken")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Victim != Event Player;
	}

	actions
	{
        //Update Internal
		Event Player.DamageDone += Event Damage;
		Victim.DamageTaken += Event Damage;

		//When someone deals damage variable fight is initiated
		Global.Fight=0;


	}
}

//Brings variable fight to a value of 1 in 5 seconds after its initiation
disabled rule("Chase fight variable")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Fight==0;
	}

	actions
	{
		Chase global variable over time(Fight, 1, 5, None);
	}
}

//Tracks start of Fights
disabled rule("Fight start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Fight!=1;
	}

	actions
	{
        //don't do this at game beginning
        skip if (total time elapsed < 10, 1);
		Log to Inspector(Custom String("[FIGHT_START]"));
	}
}

//Tracks End of Fights
disabled rule("Fight end")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		OR(Global.Fight==1, Is Game In Progress!=True)==True;
	}

	actions
	{
        //don't do this at game beginning
        skip if (total time elapsed < 10, 1);
		Log to Inspector(Custom String("[FIGHT_END]"));
	}
}

//Tracks Healing
//All hp gain count as healing except: temporary life (brig ult, lucio ult, sigma shift, doompassive, torb e), shields (blue life) self regen, healthpack if not hacked, payload healing, tracer recall
rule("Healing Done")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
    	//Update Internal
		Event Player.HealingDone += Event Healing;
		Healee.HealingReceived += Event Healing;
		Skip if(Event Player != Healee, 1);
		Event Player.HealingSelf += Event Healing;
		
		//Update Log
		/**
		Log to Inspector(Custom String("[PLAYER_HEALING] {0} healed {1} for {2}",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Custom String("{0} ({1})", Healee, Hero of(Healee), Null),
        		Event Healing));
        **/
	}
}


//Tracks Rezzes
rule("Track Rez"){
	event{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions{
		//Check for Mercy
		Hero Of(Event Player) == Hero(Mercy);

		//Check for Mercy Rez
		Is Using Ability 2(Event Player) == True;
	}

	actions{
		//Find the target being rezzed
		Event Player.RezTarget = Sorted Array(
			All Dead Players(
				Team Of(Event Player)), 
				Distance Between(
					Ray Cast Hit Position(
						Eye Position(Event Player),
						Eye Position(Event Player) + Facing Direction Of(Event Player) * 2,
						All Players(All Teams),
						Event Player,
						True
					), 
				Current Array Element
			)
			);


		//Log out the target mercy is rezzing
		Log To Inspector(Custom String("[RESURRECT] Team {0} Player {1} Rezzed {2}", Team Of(Event Player), Event Player, Event Player.RezTarget));
	}



}


//Catches all unspecial ults
rule("Ults used not echo or dva")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) != Hero(D.Va);
		Hero Of(Event Player) != Hero(Echo);
	}

	actions
	{
		//Increase Ult Count
        Event Player.UltsUsed += 1;

        //log ult
        Log to Inspector(Custom String("[ULT_USED] {0} used Ultimate",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Null,
        		Null));

	}
}

//When ultimate used that's not duplicate
rule("Echo used ult during copy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Game In Progress             == True;
		Is Duplicating(Event Player)    == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
        //Log Ult
        Log to Inspector(Custom String("[ECHO_ULTED_DURING_DUPLICATION] {0} used Ultimate (as {1})",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Hero Being Duplicated(Event Player),
        		Null));
        
		//Removed the stats update "Event Player.UltsUsed += 1;" as this is an ultimate used while copied as other hero, does not count towards counting ultimates used, at most we should make a variable specifically for this case


	}
}

//When echo uses duplication
rule("Echo Dup Ult Used"){
    event{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Duplicating(Event Player) == True;

	}

	actions
	{

		Event Player.UltsUsed += 1;
		//Log Dup Ult
		Log to Inspector(Custom String("[ECHO_DUPLICATE] {0} used ultimate duplicating {1}",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Hero Being Duplicated(Event Player),
        		Null));

	}
}

//TODO: Fix Baby vs Mech D.va
rule("D.va Used Bomb | D.va Remeched")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.va;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(D.va);
	}

	actions
	{
		//If Max HP was 600, they just started to bomb
		Skip If(Event Player.MaxHP < 200, 5);
			Log to Inspector(
				Custom String("[DVA BOMBED] {0}",
					Custom String(
						"{0} ({1}, {2})", 
						Event Player, 
						Hero of(Event Player), 
						Team of(Event Player)
					),
					Null,
					Null
				)
			);

			//Update HP
			Event Player.MaxHP = Max Health of Type(Event Player, Health);

			//Update Stats
			Event Player.UltsUsed += 1;
			
			//Exit so the following code isn't ran
			Abort();


        //If Max Hp was below 200, it's a remech
		Skip(1);

			//Abort if remech failed
			Wait(2.500, Ignore Condition);
			Abort If(Max Health of Type(Event Player, Health)< 200);

			//Log out remech
			Log to Inspector(
				Custom String("[DVA REMECH] {0}",
					Custom String("{0} ({1}, {2})", 
						Event Player,
						Hero of(Event Player),
						Team of(Event Player)
					),
					Null,
					Null
				)
			);

			//Update HP
			Event Player.MaxHP = Max Health of Type(Event Player, Health);

			//Update stats
			Event Player.UltsUsed += 1;
	}
}

//Final Blows Made
rule("Kills | Normal"){
    event{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Event Was Environment != True;
	}

	actions
	{
		//Log player kill
		Log to Inspector(Custom String("[PLAYER_KILL] {0} killed {1} using {2}",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Custom String("{0} ({1})", Victim, Hero of(Victim), Null),
        		Event Ability));
        		
	}
}

//Environ Kills
rule("Kills | Environmental"){
    event{
        Player Died;
        All;
        All;
    }

    conditions{
        Is Game In Progress == True;
        Event Player != Attacker;
        Event Was Environment == True;
    }

    actions{
        //Log env kill
        Log to Inspector(Custom String("[ENVIRNOMENTAL_KILL] {0} killed {1} using {2}",
        		Custom String("{0} ({1}, {2})", Attacker, Hero of(Attacker), Team of(Attacker)),
        		Custom String("{0} ({1})", Event Player, Hero of(Event Player), Null),
        		Event Ability));

    }

}

//Just normal deaths
rule("Deaths | Normal")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.Deaths += 1;
	}
}

//Suicide - Off CLiff
rule("Suicide | Off Cliff"){
    event{
        Player Died;
        All;
        All;
    }

    conditions{
        Is Game In Progress == True;
        Event Player == Attacker;
        Event Was Environment == True;
    }

    actions{
        //log suicide from fall
        Log to Inspector(Custom String("[SUICIDE_ENVIRONMENTAL_DEATH] {0} fell from a high place",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Null,
        		Null));

    }

}

//Suicide using ability
rule("Suicide | Casually"){
    event{
        Player Died;
        All;
        All;
    }

    conditions{
        Is Game In Progress == True;
        Event Was Environment != True;

        Event Player == Attacker;
    }

    actions{
        //log suicide from self-damage
        Log to Inspector(Custom String("[SUICIDE] {0} hurt itself in its confusion",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Null,
        		Null));

    }

}

//Track switches in comps
rule("Hero Swicthes"){
    event {
        Ongoing - Each Player;
        All; 
        All;
    }

    conditions{
        Hero Of(Event Player) != Player Variable(Event Player, H);
    }

    actions{
		//skip log if game not in progress
        skip if (is game in progress!=True, 1);
        //Log
        Log to Inspector(Custom String("[HERO_SWITCH] {0} switched to {1} (was {2})",
        		Custom String("{0} ({1})", Event Player, Team of(Event Player), Null),
        		Hero of(Event Player),
        		Event Player.H));
        
        //Save new hero, changed as before it was =0 so obv did not work
        Event Player.H = Hero of(Event Player);

		Event Player.MaxHP = Max Health of Type(Event Player, Health);

    }
}

//Track position
//Disabled because I like being able to use my game lol

/**
rule("Player position"){
    event{
        Ongoing - Each Player;
        All;
        All;
    }
    
    conditions{
        Is Game in Progress == True;
    }
    
    actions{
        //Log
        Log to Inspector(Custom String("[POS] {0} at: {1}",
        		Custom String("{0} ({1}, {2})", Event Player, Hero of(Event Player), Team of(Event Player)),
        		Position of(Event Player),
        		Null));
	
		Wait(0.5, Ignore Condition);
        Loop;
        
        
    }
}**/

//Log out player pos
/**
rule("Log Player Pos"){
	event{
		Ongoing - Global;
	}
	conditions{
		Is Game in Progress == True;
		Count Of(Global.Positions) >= 992;
		Global.PositionCount < 992;
	}

	actions{
		//Loop through and find position
		Log To Inspector(
			Custom String("[{0}]{1}", Value In Array(Global.Positions, Global.PositionCount),  Custom String("{0}, {1}, {2}", Value In Array(Global.Positions, Global.PositionCount + 1), Value In Array(Global.Positions, Global.PositionCount + 2), Value In Array(Global.Positions,Global.PositionCount + 3)), Null)
		);

		Global.PositionCount += 4;

		Loop If Condition Is True;

	}

}
**/

//Track Dva demech
rule("Dva mech loss"){
    event {
        Player Took Damage;
        All;
        All;
    }
    
    conditions{
		//If you're on D.va
        Hero of(Event Player)== Hero(D.va);

		//If you're alive
		Is Alive(Event Player) == True;

		//If Last Max HP was not what your hp was 
		Event Player.MaxHP !=  Max Health of Type(Event Player, Health);
		
    }


	actions{
		/**
		* If their new max hp is LESS than 500, that means
		* They've been demeched and are now baby d.va
		**/
		Abort If(Max Health of Type(Event Player, Health) > 200);

		//Log Demech
		Log To Inspector(
			Custom String("[DEMECH] Player {0} was demeched by {1} {2} ", 
				Custom String("({0}, {1})", Team Of(Event Player), Event Player, Null), 
				Custom String("({0}, {1})", Team Of(Attacker), Hero Of(Attacker), Null), 
				Event Ability
			)
		);

		//Set the new max hp
		Event Player.MaxHP =  Max Health of Type(Event Player, Health);

	}

}

/**
* Logging Game Data
*     Below are functions designed to log out 
*     information about the current game, for 
*     example how much the payload has been 
*     moved, or how much point has been captured 
*     or even when the point has been flipped
**/

//Check to see which team is on which side
rule("[ALL] Check for Attack/Defense | Team 1"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is In Setup == True;
		OR(Global.AttackingTeam == Null, Global.UpdateTeamsNeedSide == True) == True;
		Is Team on Offense(Team(Team 1))  == True;
	}


	actions{
		Global.AttackingTeam = Team(Team 1);
		Global.DefendingTeam = Team(Team 2);
		Global.UpdateTeamsNeedSide = False;

	}

}

rule("[ALL] Check for Attack/Defense | Team 2"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is In Setup == True;
		OR(Global.AttackingTeam == Null, Global.UpdateTeamsNeedSide == True) == True;
		Is Team On Offense(Team(Team 2))  == True;
	}


	actions{
		Global.AttackingTeam = Team(Team 2);
		Global.DefendingTeam = Team(Team 1);
		Global.UpdateTeamsNeedSide = False;
	}

}

//Just for consistencies sake Team 1 is attack in control
rule("[CONTROL] Manually set Attack/Defense"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is In Setup == True;
		Current Game Mode == Game Mode(Control);
		Global.UpdateTeamsNeedSide == True;

	}


	actions{
		Global.AttackingTeam = Team(Team 1);
		Global.DefendingTeam = Team(Team 2);
		Global.UpdateTeamsNeedSide = False;
	}

}

//If teams swap during setup change the variables
rule("[All] Check for change in teams"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Team On Offense(Global.AttackingTeam) != True;
	}


	actions{
		Global.UpdateTeamsNeedSide = True;
	}

}

rule("[CONTROL] Check for change in teams"){
	event{
		Ongoing - Global;
	}

	conditions{
		Global.AttackingTeam != Team(Team 1);
	}


	actions{
		Global.UpdateTeamsNeedSide = True;
	}

}



//CONTROL
//When someone else takes the point
rule("Control | Point Flop"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress == True;
		Current Game Mode == Game Mode(Control);
		Global.WhoControlsPoint != Control Mode Scoring Team;
		Is Control Mode Point Locked != True;
	}

	actions{
		//Log who took the point
		Log To Inspector(
			Custom String("[POINT_FLIP] {0} has taken the point, currently: {1}% (vs:{2}%)", Control Mode Scoring Team, Round to integer(Control Mode Scoring Percentage(Control Mode Scoring Team),Down), Round to integer(Control Mode Scoring Percentage(Opposite Team of(Control Mode Scoring Team)), Down)
			)
		);

		//Save who took point
		Global.WhoControlsPoint = Control Mode Scoring Team;
		Global.CaptureProgress  = Control Mode Scoring Percentage(Control Mode Scoring Team);
	}

}

//Log updates in percentage
rule("Control | Update Percentage Increase"){
	event{
		Ongoing - Global;
	}

	conditions{
		Current Game Mode == Game Mode(Control);
		Is Game In Progress == True;
		Global.WhoControlsPoint != Team(All);

		Modulo(Round to integer(Control Mode Scoring Percentage(Control Mode Scoring Team),Down),10)== 0;
		//Alternative methond: If the difference between last capture progress save and current capture progress is more than 10%
		//(Control Mode Scoring Percentage(Control Mode Scoring Team) - Global.CaptureProgress) > 2;

	}

	actions{
		//Log update
		Log To Inspector(
			Custom String("[POINT_UPDATE] {0} captured {1}%", Control Mode Scoring Team, Round to integer(Control Mode Scoring Percentage(Control Mode Scoring Team), Down), Null)
		);

		//Save new progress
		Global.CaptureProgress  = Control Mode Scoring Percentage(Control Mode Scoring Team);

	}

}

//HYBRID | Control
rule("Hybrid | Track Tick Gains"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress   == True;
		Current Game Mode     == Game Mode(Hybrid);

		//At ticks, log
		OR(
			AND(33.333 < Point Capture Percentage, Point Capture Percentage < 35),

			AND(66.666 < Point Capture Percentage, Point Capture Percentage < 68)

		) == True;

	}

	actions{
		//If in control
		//TODO LOG WHAT TEAM EARNED A TICK
		Log To Inspector(
			Custom String("[EARNED_TICK] {0} captured {1}%", Global.AttackingTeam, Round to integer(Point Capture Percentage,Down), Null)
		);
		
	}
}

//HYBRID | Payload
rule("Hybrid | Payload Gains"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress == True;
		Current Game Mode == Game Mode(Hybrid);
		Is objective complete (Global.CaptureProgress)==True;
	}

	actions{
		//TODO LOG WHAT TEAM WON THE POINT
		Log To Inspector(
			Custom String("[WON_POINT] {0} CAPTURED POINT {1}", Global.AttackingTeam, Global.CaptureProgress + 1, Null)
		);
		Global.CaptureProgress = Objective Index; 
	}
}

//2CP | Point
rule("2CP | Point Capture Progress"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress == True;
		Current Game Mode   == Game Mode(Assault);

		//At ticks, log
		OR(
			AND(33.333 < Point Capture Percentage, Point Capture Percentage < 35),

			AND(66.666 < Point Capture Percentage, Point Capture Percentage < 68)

		) == True;
	}

	actions{
		Log To Inspector(
			Custom String("[EARNED_TICK] {0} captured {1}% of Point {2}", Global.AttackingTeam, Round to integer (Point Capture Percentage, Down), (Objective Index + 1))
		);
	}
}

rule("2CP | Point Capture"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress == True;
		Current Game Mode   == Game Mode(Assault);
		Is objective complete (Global.CaptureProgress)==True;
	}

	actions{
		Log To Inspector(
			Custom String("[WON_POINT] {0} CAPTURED POINT {2}", Global.AttackingTeam, Round to integer (Point Capture Percentage, Down), (Global.CaptureProgress + 1))
		);
		Global.CaptureProgress = Objective Index;		
	}
}


//Escort | Payload
rule("Escort | Payload Gains"){
	event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress    == True;
		Current Game Mode      == Game Mode(Escort);
		Is objective complete (Global.CaptureProgress)==True;
	}

	actions{
		Log To Inspector(
			Custom String("[WON_POINT] {0} CAPTURED POINT {1}", Global.AttackingTeam, Global.CaptureProgress + 1, Null)
		);
		Global.CaptureProgress = Objective Index; 
	}
}

rule("Report round Score not control"){
    event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress != True;
		Current Game Mode   != Game Mode(Control);
	}

    actions{
        //don't do this at game beginning
        abort if(total time elapsed < 5);
        
		Log To Inspector(Custom String("[SCORE_ALL] {0} SCORED {1}", Global.AttackingTeam, Team Score(Global.AttackingTeam), Null));

    }
}

rule("Report round score control"){
    event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress != True;
		Current Game Mode   == Game Mode(Control);
	}

    actions{
        //don't do this at game beginning
        abort if (total time elapsed < 5);
        
		//Log out which team won
		Skip If(Control Mode Scoring Percentage(Global.AttackingTeam) < Control Mode Scoring Percentage(Global.DefendingTeam), 2);

		Log To Inspector(
			Custom String("[ROUND_END_SCORE] {0} vs {1}",
				//Winning Team
				Custom String("Team {0} Won with a score of {1}",
					Global.AttackingTeam,
					
					Control Mode Scoring Percentage(Global.AttackingTeam),

					Null
				),
				
				//Losing Team
				Custom String("Team {0} Lost with a score of {1}",
					Global.DefendingTeam,
					
					Control Mode Scoring Percentage(Global.DefendingTeam),

					Null
				),
				
				Null
			
			)
		);

		//Make sure the rest of the statement doesn't fire
		Abort();

		Log To Inspector(
			Custom String("[ROUND_END_SCORE] {0} vs {1}",
				//Winning Team
				Custom String("Team {0} Won with a score of {1}",
					Global.DefendingTeam,
					
					Control Mode Scoring Percentage(Global.DefendingTeam),

					Null
				),
				
				//Losing Team
				Custom String("Team {0} Lost with a score of {1}",
					Global.AttackingTeam,
					
					Control Mode Scoring Percentage(Global.AttackingTeam),

					Null
				),
				
				Null
			
			)
		);



    }
}

rule("Game not in progress: Tell log game done"){
    event{
		Ongoing - Global;
	}

	conditions{
		Is Game In Progress != True;
	}

    actions{
        //don't do this at game beginning
        skip if (total time elapsed < 5, 3);
        
		//Global.Positions = Array();
        Log To Inspector(Custom String("[ROUND_END]", Null, Null, Null));

		//Setup Game Info
		Global.AttackingTeam = Null;
		Global.DefendingTeam = Null;

    }
}



/**
* Quality of Life Changes
*     Below are a bunch of quality of life changes 
*     made to custom scrim lobbies that I stole straight
*     from Seita (credit where credit due :D)
*     It includes:
*         - hold reload to change hero on defense
*         - hold melee to teleport to first point 
*         - And score sets to max upon round change 
**/
rule("Hold Reload: Change hero for Defense team")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Is Team On Defense(Team Of(Event Player)) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
		Match Time >= 1;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Small Message(Event Player, Custom String("keep holding reload to change hero"));
		Wait(0.700, Abort When False);
		Event Player.HeroList = All Heroes;
		Modify Player Variable(Event Player, HeroList, Remove From Array By Value, Hero Of(Event Player));
		Set Player Allowed Heroes(Event Player, Event Player.HeroList);
		Wait(0.100, Ignore Condition);
		Set Player Allowed Heroes(Event Player, All Heroes);
	}
}

rule("First attack done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Between Rounds == True;
		Is Team On Offense(Team 2) == True;
		Global.ScoreModified == 0;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Global.FirstRoundDone = True;
	}
}

rule("Set Team Score: Escort & Hybrid")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.FirstRoundDone == True;
		Global.GameMode == 1;
	}

	actions
	{
		Set Team Score(Team 2, 3);
		Global.ScoreModified = 1;
	}
}

rule("Set Team Score: Assault")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.FirstRoundDone == True;
		Global.GameMode == 2;
	}

	actions
	{
		Set Team Score(Team 2, 2);
		Global.ScoreModified = 1;
	}
}

/**
* Game Mode Check
*	Check to see what game mode we're on and update the score accordingly
**/

rule("Game Mode check: Escort")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Escort);
	}

	actions
	{
		Global.GameMode = 1;
	}
}

rule("Game Mode check: Hybrid")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Hybrid);
	}

	actions
	{
		Global.GameMode = 1;
	}
}

rule("Game Mode check: Assault")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Assault);
	}

	actions
	{
		Global.GameMode = 2;
	}
}

rule("Game Mode check: Control")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Control);
	}

	actions
	{
		Global.GameMode = 3;
	}
}


/**
* Seita's Teleportation 
*     Below is seita's teleportion tech that allows users
*     to teleport to a place on the map when on defence to make 
*     setup faster.
**/
rule("Press Melee: Blizz World (Press Melee for all of the maps)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Blizzard World);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-8.171, 3.824, 65.861));
	}
}

rule("Eichen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Eichenwalde);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(13.226, 12.981, -83.655));
	}
}

rule("Hollywood")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Hollywood);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-19.248, 8.007, -9.802));
	}
}

rule("Kings")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(King's Row);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-37.185, 10.346, -15.058));
	}
}

rule("Numbani")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Numbani);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(93.044, 5.530, -22.723));
	}
}

rule("Hanamura")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Hanamura);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(13.079, 1.346, -24.267));
	}
}

rule("Horizon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Horizon Lunar Colony);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(42.356, 15.840, -79.798));
	}
}

rule("Paris")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Paris);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-40.379, 16.500, -14.259));
	}
}

rule("Anubis")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Temple of Anubis);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-23.909, 3.312, 46.940));
	}
}

rule("Volskaya")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Volskaya Industries);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-35.545, -1.433, 73.561));
	}
}

rule("Dorado")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Dorado);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(57.088, 9.241, -16.884));
	}
}

rule("Havana")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Havana);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-18.059, 9.184, -70.117));
	}
}

rule("Junkertown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Junkertown);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-28.382, 14.223, -68.289));
	}
}

rule("Rialto")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Rialto);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(55.603, 2.452, -44.947));
	}
}

rule("Route")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Route 66);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(33.662, 10.325, -5.514));
	}
}

rule("Gibraltar")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Current Map == Map(Watchpoint: Gibraltar);
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(32.488, 4.692, -71.941));
	}
}


/**
*   Scrim Lobby Controls
*       These are the controls that allow for 
*       Seita's unique custom scrim lobby design 
**/ 
rule("Setup Seita Scrim lobby text")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		//Disable Inspector Recording;
		Global.Team1Hud[0] = -1;
		Global.Team1Hud[1] = -1;
		Global.Team1Hud[2] = -1;
		Global.Team2Hud[0] = -1;
		Global.Team2Hud[1] = -1;
		Global.Team2Hud[2] = -1;

		Global.HelpHud[0] = -1;
		Global.HelpHud[1] = -1;
		Global.HelpHud[2] = -1;
		Global.HelpHud[3] = -1;
		Global.HelpHud[4] = -1;
		Global.HelpHud[5] = -1;
		Global.HelpHud[6] = -1;
		Global.HelpHud[7] = -1;
		Global.HelpHud[8] = -1;
		Global.HelpHud[9] = -1;
		Global.HelpHud[10] = -1;

		//Global.Positions = Array();
		//Global.PositionCount = 0;

	}
}

rule("Remove Assembling Heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
		Wait(5, Ignore Condition);
		Set Match Time(10);
	}
}

rule("Both Teams Ready: Match starts in 5 sec, Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == True;
		Global.Team2Ready == True;
	}

	actions
	{
		Set Match Time(5);
		Wait(1, Ignore Condition);
		Global.Team1Ready = False;
		Global.Team2Ready = False;
		Global.TimeCooldown = 0;
		Global.BreakCooldown = 0;
		Global.T1ReadyCD = 0;
		Global.T2ReadyCD = 0;

		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
		Destroy HUD Text(Global.HelpHud[0]);
		Destroy HUD Text(Global.HelpHud[1]);
		Destroy HUD Text(Global.HelpHud[2]);
		Destroy HUD Text(Global.HelpHud[3]);
		Destroy HUD Text(Global.HelpHud[4]);
		Destroy HUD Text(Global.HelpHud[5]);
		Destroy HUD Text(Global.HelpHud[6]);
		Destroy HUD Text(Global.HelpHud[7]);
		Destroy HUD Text(Global.HelpHud[8]);
		Destroy HUD Text(Global.HelpHud[9]);
		Destroy HUD Text(Global.HelpHud[10]);

        //Print out what round we're on
        //Log to Inspector(Custom String("[ROUND_START] Started Round: {0} on Map: {1}", Current Map, Match Round));

        
	}
}

rule("Ultimate: +20s match time while in setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time >= 1;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == False;
		Global.TimeCooldown == 0;
	}

	actions
	{
		Global.TimeCooldown = 2;
		Set Match Time(Match Time + 20);
		Chase Global Variable At Rate(TimeCooldown, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("added 20 seconds")));
	}
}

rule("Interact + Ultimate: +5min match time while in setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time >= 1;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.BreakCooldown == 0;
	}

	actions
	{
		Global.BreakCooldown = 10;
		Global.TimeCooldown = 10;
		Set Match Time(Match Time + 300);
		Chase Global Variable At Rate(BreakCooldown, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(TimeCooldown, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("added 5 mins")));
	}
}

rule("Crouch + Interact: Team 1 Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team1Ready == False;
		Global.T1ReadyCD == 0;
	}

	actions
	{
		Global.T1ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team1Ready = True;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
	}
}

rule("Crouch + Interact: Team 1 Not Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team1Ready == True;
		Global.T1ReadyCD == 0;
	}

	actions
	{
		Global.T1ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team1Ready = False;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
	}
}

rule("Crouch + Interact: Team 2 Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team2Ready == False;
		Global.T2ReadyCD == 0;
	}

	actions
	{
		Global.T2ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team2Ready = True;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
	}
}

rule("Crouch + Interact: Team 2 Not Ready")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Team2Ready == True;
		Global.T2ReadyCD == 0;
	}

	actions
	{
		Global.T2ReadyCD = 1;
		Wait(0.100, Ignore Condition);
		Global.Team2Ready = False;
		Chase Global Variable At Rate(T1ReadyCD, 0, 1, Destination and Rate);
		Chase Global Variable At Rate(T2ReadyCD, 0, 1, Destination and Rate);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
	}
}

rule("HUD: Team 1 Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 1), Custom String("Your team is ready"), Null, Null, Top, 20, Color(Green), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team1Hud[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Enemy team is ready"), Null, Null, Top, 20, Color(Red), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team1Hud[1] = Last Text ID;
		Create HUD Text(Null, Custom String("Blue team is ready"), Null, Null, Top, 0, Color(Blue), Color(White), Color(White), Visible To and String,
			Visible Always);
		Global.Team1Hud[2] = Last Text ID;
	}
}

rule("HUD: Team 1 Not Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team1Ready == False;
	}

	actions
	{
		Destroy HUD Text(Global.Team1Hud[0]);
		Destroy HUD Text(Global.Team1Hud[1]);
		Destroy HUD Text(Global.Team1Hud[2]);
	}
}

rule("HUD: Team 2 Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team2Ready == True;
	}

	actions
	{
		Create HUD Text(All Players(Team 2), Custom String("Your team is ready"), Null, Null, Top, 20, Color(Green), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team2Hud[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Enemy team is ready"), Null, Null, Top, 20, Color(Red), Color(White), Color(White),
			Visible To and String, Visible Never);
		Global.Team2Hud[1] = Last Text ID;
		Create HUD Text(Null, Custom String("Red team is ready"), Null, Null, Top, 0, Color(Red), Color(White), Color(White), Visible To and String,
			Visible Always);
		Global.Team2Hud[2] = Last Text ID;
	}
}

rule("HUD: Team 2 Not Ready")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.Team2Ready == False;
	}

	actions
	{
		Destroy HUD Text(Global.Team2Hud[0]);
		Destroy HUD Text(Global.Team2Hud[1]);
		Destroy HUD Text(Global.Team2Hud[2]);
	}
}


/**
* Intro Texts
*     The code below allows us to 
**/
rule("Help HUD at the start of the game")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
        /**
        * Info Texts
        *    - Stats are only for specs
        *    - How Stats work | Tanks & DPS
        *    - How Stats work | Supports
        **/

        //Stats are only for specs
		Create HUD Text(Null, Null, Custom String("Statistics are only shown to Spectators"), Null, Right, 28, Color(White), Color(Aqua), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[6] = Last Text ID;

        //How stats work | DPS & Tanks
		Create HUD Text(Null, Null, Custom String("DPS&Tanks: Damage Done - Damage Taken - Ults used  - Deaths"), Null, Right, 29, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[7] = Last Text ID;

        //How Stats work | Supports
		Create HUD Text(Null, Null, Custom String("Supports: Damage Done - Healing Done - Ults used - Deaths"), Null, Right, 30, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[8] = Last Text ID;



		/**
        * Control Texts
        *    - Controls | Ready Up
        *    - Controls | Add Seconds
        *    - Controls | Add Mins
        *    - Controls | Teleport
        *    - Controls | Change Heroes
        **/

        //Ready Intro Text
        Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} + {1}: Ready (or cancel Ready)", Null, Input Binding String(Button(Interact)), Input Binding String(Button(Crouch))), Null, Right, 22, Color(White), Color(Aqua), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[2] = Last Text ID;

        //Add Seconds
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} : adds extra 20 seconds to setup", Input Binding String(Button(Ultimate))), Null, Right, 23, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[3] = Last Text ID;

        //Add 5 mins
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} + {1}: Adds 5 min break timer", Input Binding String(Button(Interact)), Input Binding String(Button(Ultimate))), Null, Right, 24, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[4] = Last Text ID;

        //Teleport Prompt BROKEN BELOW "EXPECTED ( AFTER OR"
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} : Teleport (works only in Defense, in spawn)", Input Binding String(Button(Melee))), Null, Right, 25, Color(White), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[9] = Last Text ID;

        //Change heroes
		Create HUD Text(All Players(All Teams), Null, Custom String("Hold {0} : Change hero (works only in Defense)", Input Binding String(Button(Reload))), Null, Right, 26, Color(White), Color(Yellow), Color(White), Visible To and String, Default Visibility);
		Global.HelpHud[10] = Last Text ID;

        /**
        * Barrier Texts
        *    Barrier texts for sure lmao
        **/ 
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, 20, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
        Global.HelpHud[0] = Last Text ID;
	
        Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, 21, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
        Global.HelpHud[1] = Last Text ID;

		Create HUD Text(Null, Null, Null, Custom String(" "), Right, 27, Color(White), Color(White), Color(White), Visible To and String, Visible Always);
		Global.HelpHud[5] = Last Text ID;

	}
}

/*
*   Name:        GameState.ostw
*   Author:      leguminote#5816
*   Description: This file holds the code to keep track of game state
*/
import "./Classes/PlayerStateClass.ostw";
import "./PlayerStateInitRules.ostw";

/*
*  @name        PrintStatusOnDeath
*  @description Logs status on player death
*  
*/
rule: "PrintStatusOnDeath" Event.OnDeath
    {
        LogToInspector("Death:");
        LogToInspector(CurrentPlayerState.LogState());
    }

/*
*  @name        PrintStatusOnDemech
*  @description Logs status on demech
*  
*/
rule: "PrintStatusOnDemech" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(HasSpawned())
    if(Not(IsInSpawnRoom()))
    if(HeroOf() == Hero.Dva)
    if(Not(IsInAlternateForm()))
    if(Not(CurrentPlayerState.GetState(PlayerStateEnum.InSpawn)))
    if(Health() < 0.5)
    {
        LogToInspector("Demech:");
        LogToInspector(CurrentPlayerState.LogState());
    }

rule: "PrintStatusOnDuplicateDemech" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(HasSpawned())
    if(Not(CurrentPlayerState.GetState(PlayerStateEnum.InSpawn)))
    if(HeroOf() == Hero.Echo)
    if(CurrentPlayerState.GetState(PlayerStateEnum.HeroBeingDuplicated) == Hero.Dva ||
        PlayerState.ActualHeroBeingDuplicated(EventPlayer()) == Hero.Dva)
    if(Not(PlayerState.ActualAlternateForm(EventPlayer())))
    if(Health() < 0.5)
    {
        LogToInspector("Duplicate Demech:");
        LogToInspector(CurrentPlayerState.LogState());
        CurrentPlayerState.Update();
    }

rule: "TestDuplicate" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(HeroOf() == Hero.Echo)
    if(IsDuplicating())
    {
        LogToInspector(<"IS DUPLICATING <0>", PlayerState.ActualHeroBeingDuplicated(EventPlayer())>); 
        LogToInspector(CurrentPlayerState.LogState());
    }


/*
*  @name        PrintStatusOnDuplicateStart
*  @description Logs status on echo duplicate start
*  
*/
rule: "PrintStatusOnDuplicateStart" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(CurrentPlayerState.DuplicateStartEvent())
    {
        LogToInspector("DupStart:");
        LogToInspector(CurrentPlayerState.LogState());
    }

/*
*  @name        PrintStatusOnDeath
*  @description Logs status on echo duplicate end
*  
*/
rule: "PrintStatusOnDuplicateEnd" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(CurrentPlayerState.DuplicateEndedEvent())
    {
        LogToInspector("DupEnd:");
        LogToInspector(CurrentPlayerState.LogState());
    }

rule: "AMMO" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(IsButtonHeld(EventPlayer(), Button.Reload))
    {
        LogToInspector(<"MAX: <0>, CUR: <1>",MaxAmmo(), Ammo()>);
    }
/*
*   Name:        GameState.ostw
*   Author:      leguminote#5816
*   Description: This file holds the code to keep track of game state
*/
import "PlayerState.ostw";

playervar define PrintTempFlag = true;
playervar define PlayerStateInitialized = false;
playervar PlayerState CurrentPlayerState;
// globalvar define RoundState = [];

/*
*  @name        InitPlayerStatus
*  @description Initializes CurrentPlayerStatus
*  
*/
rule: "InitPlayerStatus" Event.OngoingPlayer
    if(IsGameInProgress())
    if(Not(PlayerStateInitialized))
    {
        PlayerStateInitialized = true;
        CurrentPlayerState = new PlayerState(EventPlayer());
    }

/*
*  @name        PrintStatusOnDeath
*  @description Logs status on player death
*  
*/
rule: "PrintStatusOnDeath" Event.OnDeath
    {
        LogToInspector(CurrentPlayerState.LogState());
    }

/*
*  @name        PrintStatusOnDemech
*  @description Logs status on demech
*  
*/
rule: "PrintStatusOnDemech" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(CurrentPlayerState.DemechEvent())
    {
        LogToInspector(CurrentPlayerState.LogState());
    }

/*
*  @name        PrintStatusOnDeath
*  @description Logs status on echo duplicate end
*  
*/
rule: "PrintStatusOnDuplicateEnd" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(CurrentPlayerState.DuplicateEndedEvent())
    {
        LogToInspector(CurrentPlayerState.LogState());
    }

/*
*  @name        PlayerStatusTransition
*  @description Updates Player State whenever the values change
*               Only starts when game is in progress
*               Status remains on death and resets on spawn
*               The intent is to read these values on death
*
*  Note: This rule must be after the prints as to not overwrite
*/
rule: "PlayerStatusTransition" Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(PlayerStateInitialized)
    //if(EventPlayer() == HostPlayer())
    if(CurrentPlayerState.IsStale())
    {
        //LogToInspector(CurrentPlayerState.LogState());//
        CurrentPlayerState.Update();
    }

//************************************************************************
//Helper functions for testing only | Remove for actual code
rule: "LogPlayerStatus" Event.OngoingPlayer
    if(PrintTempFlag)
    if(IsButtonHeld(EventPlayer(), Button.Interact))
    {
        PrintTempFlag = false;
        CurrentPlayerState.LogState();
    }

rule: "ResetPrintFlag" Event.OngoingPlayer
    if(Not(PrintTempFlag))
    if(IsButtonHeld(EventPlayer(), Button.Crouch))
    {
        PrintTempFlag = true;
    }
    




/*
*   Name:        ObjectiveLogs.ostw
*   Author:      leguminote#5816
*   Description: This file holds the code to log objective info
*/

import "./HelperFunctions/StringUtils.ostw";
import "./HelperFunctions/InfoUtils.ostw";
import "./HelperFunctions/NumUtils.ostw";


globalvar define CaptureProgress = 0;
globalvar define WhoControlsPoint = Team.All;
globalvar define NextTick = 0;
globalvar define PartialProgress = 0;

/*
*  @name        RoundStartInitCaptureProgress
*  @description Initialize variables needed for Capture Progress
*/
rule: "RoundStartInitCaptureProgress"
    if(IsGameInProgress())
    {
        CaptureProgress = ObjectiveIndex();
        PartialProgress = 0;
    }

/*
*  @name        ControlPointFlip
*  @description Log control point flip and update who controls point
*/
rule: "ControlPointFlip"
    if(IsGameInProgress())
    if(CurrentGameMode() == GameMode.Control)
    if(Not(IsControlModePointLocked()))
    if(WhoControlsPoint != ControlModeScoringTeam())
    {
        LogToInspector(<"[POINT_FLIP] [<0>] has taken the point, currently: [<1>]% (vs:[<2>]%) REMAINING TIMEBANK [<3>]",
            ControlModeScoringTeam(),
            RoundToInteger(ControlModeScoringPercentage(ControlModeScoringTeam()), Rounding.Down),
            RoundToInteger(ControlModeScoringPercentage(OppositeTeamOf(ControlModeScoringTeam()))),
            MatchTime()
        >);
        WhoControlsPoint = ControlModeScoringTeam();
    }

/*
*  @name        ControlUpdatePercentageIncrease
*  @description Log control update percentage increase
*/
rule: "ControlUpdatePercentageIncrease"
    if(CurrentGameMode() == GameMode.Control)
    if(IsGameInProgress())
    if(WhoControlsPoint != Team.All)
    if(RoundToInteger(ControlModeScoringPercentage(ControlModeScoringTeam()), Rounding.Down) % 10 == 0)
    {
        LogToInspector(<"[POINT_UPDATE] [<0>] captured [<1>]%",
            ControlModeScoringTeam(), 
            RoundToInteger(ControlModeScoringPercentage(ControlModeScoringTeam()), Rounding.Down)
        >);
        CaptureProgress = ControlModeScoringPercentage(ControlModeScoringTeam());
    }

/*
*  @name        HybridTickGain
*  @description Log hybrid tick gain
*/
rule: "HybridTickGain"
    if(IsGameInProgress())
    if(CurrentGameMode() == GameMode.Hybrid)
    if(PointCapturePercentage() >= NextTick * 100/3 && PointCapturePercentage() < NextTick * 100/3 + 1)
    {
        if(NextTick > 0) {
            LogToInspector(<"[EARNED_TICK] [<0>] captured [<1>]% REMAINING TIMEBANK [<2>]",
                AttackingTeam(), 
                RoundToInteger(PointCapturePercentage(), Rounding.Down),
                MatchTime()
            >);
        }
        NextTick++;
    }

/*
*  @name        HybridPointCaptured
*  @description Log hybrid point capped
*/
rule: "HybridPointCaptured"
    if(CurrentGameMode() == GameMode.Hybrid)
    if(IsObjectiveComplete(CaptureProgress))
    {
        if(CaptureProgress == 0) {
            LogToInspector(<
                "[WON_POINT] [<0>] CAPTURED POINT [<1>] REMAINING TIMEBANK [<2>]", 
                AttackingTeam(), 
                CaptureProgress + 1,
                MatchTime()
            >);
        } else {
            LogToInspector(<
                "[WON_POINT] [<0>] CAPTURED POINT [<1>] PROGRESS [<2>] REMAINING TIMEBANK [<3>]",
                AttackingTeam(), 
                CaptureProgress + 1,
                AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress) > 97 ? 100 :
                    AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress),
                MatchTime()
            >);
        }
        if(IsGameInProgress()){
            PartialProgress = 0;
        }
        if(Not(IsGameInProgress()) && AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress) > 99)
        {
            PartialProgress = 100;
        }
        CaptureProgress = ObjectiveIndex();
        NextTick = 0;
    }

/*
*  @name        AssaultTickGain
*  @description Log assualt tick gain
*/
rule: "AssaultTickGain"
    if(IsGameInProgress())
    if(CurrentGameMode() == GameMode.Assault)
    if(PointCapturePercentage() >= NextTick * 100/3 && PointCapturePercentage() < NextTick * 100/3 + 1)
    {
        if(NextTick > 0) {
            LogToInspector(<"[EARNED_TICK] [<0>] captured [<1>]% of Point [<2>] REMAINING TIMEBANK [<3>]",
                AttackingTeam(),
                RoundToInteger(PointCapturePercentage(), Rounding.Down),
                ObjectiveIndex() + 1,
                MatchTime()
            >);
        }
        NextTick++;
    }

/*
*  @name        AssaultPointCaptured
*  @description Log assault point capped
*/
rule: "AssaultPointCaptured"
    if(CurrentGameMode() == GameMode.Assault)
    if(IsObjectiveComplete(CaptureProgress))
    {
        LogToInspector(<
            "[WON_POINT] [<0>] CAPTURED POINT [<1>] REMAINING TIMEBANK [<2>]", 
            AttackingTeam(), 
            CaptureProgress + 1,
            MatchTime()
        >);
        if(IsGameInProgress()){
            PartialProgress = 0;
        }
        if(Not(IsGameInProgress()) && PartialProgress > 97)
        {
            PartialProgress = 100;
        }
        CaptureProgress = ObjectiveIndex();
        NextTick = 0;
    }

/*
*  @name        EscortUpdate
*  @description Log Escort checkpoints
*/
rule: "EscortUpdate"
    if(CurrentGameMode() == GameMode.Escort)
    if(IsObjectiveComplete(CaptureProgress))
    {
        LogToInspector(<
            "[WON_POINT] [<0>] CAPTURED POINT [<1>] PROGRESS [<2>] REMAINING TIMEBANK [<3>]",
            AttackingTeam(),
            CaptureProgress + 1,
            AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress) > 97 ? 100 :
                    AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress) ,
            MatchTime()
        >);
        if(Not(IsGameInProgress()) && AdjustedProgressPercent(CurrentMap(), CaptureProgress, PartialProgress) > 97)
        {
            PartialProgress = 100;
        }
        CaptureProgress = ObjectiveIndex();
    }

//*****************************************************//
// Track Max Objective Progress                        //
//*****************************************************//

/*
*  @name        AssaultUpdatePartialProgress
*  @description Update PartialProgress for Assualt
*/
rule: "AssaultUpdatePartialProgress"
    if(CurrentGameMode() == GameMode.Assault)
    if(PointCapturePercentage() > 100/3)
    if(PointCapturePercentage() > PartialProgress)
    {
        while(IsGameInProgress() && PointCapturePercentage())
        {
            PartialProgress = PointCapturePercentage() > PartialProgress ? PointCapturePercentage() : PartialProgress;
            Wait(0.250, WaitBehavior.IgnoreCondition);
        }
    }

/*
*  @name        HybridPointUpdatePartialProgress
*  @description Update PartialProgress for Hybrid points
*/
rule: "HybridPointUpdatePartialProgress"
    if(CurrentGameMode() == GameMode.Hybrid)
    if(CaptureProgress == 0)
    if(PointCapturePercentage() > 100/3)
    if(PointCapturePercentage() > PartialProgress)
    {
        while(IsGameInProgress() && PointCapturePercentage())
        {
            PartialProgress = PointCapturePercentage() > PartialProgress ? PointCapturePercentage() : PartialProgress;
            Wait(0.250, WaitBehavior.IgnoreCondition);
        }
    }

/*
*  @name        HybridPayloadUpdatePartialProgress
*  @description Update PartialProgress for Hybrid payload
*/
rule: "HybridPayloadUpdatePartialProgress"
    if(CurrentGameMode() == GameMode.Hybrid)
    if(CaptureProgress != 0)
    if(PayloadProgressPercentage() > PartialProgress)
    {
        while(IsGameInProgress() && PayloadProgressPercentage())
        {
            PartialProgress = PayloadProgressPercentage() > PartialProgress ? PayloadProgressPercentage() : PartialProgress;
            Wait(0.250, WaitBehavior.IgnoreCondition);
        }
    }

/*
*  @name        EscortUpdatePartialProgress
*  @description Update PartialProgress for Escort
*/
rule: "EscortUpdatePartialProgress"
    if(CurrentGameMode() == GameMode.Escort)
    if(PayloadProgressPercentage() > PartialProgress)
    {
        while(IsGameInProgress() && PayloadProgressPercentage())
        {
            PartialProgress = PayloadProgressPercentage() > PartialProgress ? PayloadProgressPercentage() : PartialProgress;
            Wait(0.250, WaitBehavior.IgnoreCondition);
        }
    }
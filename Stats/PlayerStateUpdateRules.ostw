/*
*   Name:        PlayerStateUpdateRules.ostw
*   Author:      leguminote#5816
*   Description: This file holds the code to update player state
*   NOTE:        IMPORT AFTER STATS THAT USE THESE VALUES
*/
import "./Classes/PlayerStateClass.ostw";
import "./HelperFunctions/StringUtils.ostw";
import "./PlayerStateInitRules.ostw";

/*
*  @name        PlayerStateTransition
*  @description Updates Player State whenever the values change
*               Only starts when game is in progress
*               Status remains on death and resets on spawn
*               The intent is to read these values on death
*
*  Note: This rule must be after the prints as to not overwrite
*/
globalvar define FieldNames = [ //Set up list of state field names for logging

    "IsAlseep",               //0
    "IsBurning",              //1
    "IsFrozen",               //2
    "IsHacked",               //3
    "IsKnockedDown",          //4
    "IsRooted",               //5
    "IsStunned",              //6
    "IsInAlternateForm",      //7
    "HeroBeingDuplicated",    //8
    "IsReloading",            //9
    "IsScoped",               //10
    "InSpawn",                //11
    "HasUlt"                 //12
];
rule: "PlayerStateTransition" 2 Event.OngoingPlayer
    if(IsGameInProgress())
    if(IsAlive())
    if(PlayerStateInitialized)
    if(CurrentPlayerState.IsStale())
    {
        define StalePlayerState = CurrentPlayerState.GetFullState(); //Store the stale state before we update, since all fields are updated
        CurrentPlayerState.Update();
        define ActivePlayerState = CurrentPlayerState.GetFullState();
        for (define i = 0; i < 13; i++)
          if(ActivePlayerState[i] != StalePlayerState[i])
          {
              Log(<
            "[STATE_CHANGE] [<0>] [<1>], [<2>], [<3>] changed to [<4>]",
            EventPlayer(),
            HeroOf(EventPlayer()),
            TeamOf(EventPlayer()),
            FieldNames[i],
            ActivePlayerState[i]>);
          }
    }
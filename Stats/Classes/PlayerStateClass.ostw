/*
*   Name:        PlayerStateClass.ostw
*   Author:      leguminote#5816
*   Description: This file holds the PlayerState Class and Enum
*/

class PlayerState
{
    /*
    *   Name:        PlayerState 
    *   Description: This Class handles player state data to be used on death, demech,
    *                and duplicate ending. This is needed because these player state
    *                transistions cause the loss of player state info.
    *   <Class>
    */

    //*****************************************************//
    // fields                                              //
    //*****************************************************//
    private define player;              //Player who's info is being stored
    private define PlayerStateArray;    //Player info that is being stored


    //*****************************************************//
    // constructors                                        //
    //*****************************************************//
    /*
    *  @name        PlayerState
    *  @description sets this.player and initializes
    *               PlayerStateArray to player's current values
    *  <Constructor>
    */
    public PlayerState(Player player_arg)
    {
        player = player_arg;
        PlayerStateArray = GetUpdated();
    }


    //*****************************************************//
    // public functions                                    //
    //*****************************************************//

    /*
    *  @name        ActualHeroBeingDuplicated
    *  @description Gets Player Being Duplicated without d.va glitches
    *  <Macro>
    */
    public static define ActualHeroBeingDuplicated(Player player_arg):
        HeroOf(player_arg) != Hero.Echo ||
        (IndexOfArrayValue(AllHeroes(), HeroBeingDuplicated(player_arg)) >= 0) ||
        MaxAmmo(player_arg) != 0 ?
            HeroBeingDuplicated(player_arg) : 
            Hero.Dva;

    /*
    *  @name        ActualAlternateForm
    *  @description Gets Alternate Form without glitches related to duplicating d.va
    *  <Macro>
    */
    public static define ActualAlternateForm(Player player_arg):
        HeroOf(player_arg) != Hero.Echo ||
        (IndexOfArrayValue(AllHeroes(), HeroBeingDuplicated(player_arg)) >= 0) ||
        MaxAmmo(player_arg) != 0 ?
            IsInAlternateForm(player_arg) : 
            HeroBeingDuplicated(player_arg) == Hero.Dva;

    /*
    *  @name        DuplicateEndedEvent
    *  @description Returns when true if duplicate starts
    *  <Macro>
    */
    public define DuplicateStartEvent():
        HeroOf(player) == Hero.Echo &&
            IndexOfArrayValue(AllHeroes(), PlayerStateArray[PlayerStateEnum.HeroBeingDuplicated]) == -1 &&
            //(PlayerStateArray[PlayerStateEnum.HeroBeingDuplicated] != HeroBeingDuplicated(player)) &&
            IndexOfArrayValue(AllHeroes(), PlayerState.ActualHeroBeingDuplicated(player)) >= 0;

    /*
    *  @name        DuplicateEndedEvent
    *  @description Returns when true if duplicate ends
    *  <Macro>
    */
    public define DuplicateEndedEvent():
        HeroOf(player) == Hero.Echo &&
            IndexOfArrayValue(AllHeroes(), PlayerStateArray[PlayerStateEnum.HeroBeingDuplicated]) >= 0 &&
            //(PlayerStateArray[PlayerStateEnum.HeroBeingDuplicated] != HeroBeingDuplicated(player)) &&
            IndexOfArrayValue(AllHeroes(), PlayerState.ActualHeroBeingDuplicated(player)) == -1;

    /*
    *  @name        IsScoped
    *  @description Returns true if Player is Scoped / ADS
    *  <Macro>
    */
    public define IsScoped():
        (IsScopedHero(HeroOf(player)) ||
        (HeroBeingDuplicated(player) != false && IsScopedHero(HeroBeingDuplicated(player)))) &&
        IsButtonHeld(player, Button.SecondaryFire);

    /*
    *  @name        IsStale
    *  @description Returns true if PlayerStateArray[index] is outdated
    *  <Macro>
    */
    public define IsStale(define Kind):
        PlayerStateArray[Kind] != GetUpdated()[Kind];

    /*
    *  @name        IsStale
    *  @description Returns true if PlayerStateArray is outdated
    *  <Macro>
    */
    public define IsStale():
        PlayerStateArray != GetUpdated();  

    /*
    *  @name        Update
    *  @description Updates PlayerStateArray with current values
    *               Note: This does not check if the player is dead
    *  
    */
    public void Update()
    {
        PlayerStateArray = GetUpdated();
    }

    /*
    *  @name        GetState
    *  @description Returns status from PlayerStateArray give index
    *               Use PlayerStateEnum for indices
    *  <Macro>
    */
    public define GetState(define Kind):
        PlayerStateArray[Kind];   

    /*
    *  @name        GetUpdated
    *  @description Returns updated PlayerStateArray for this.player
    *  <Macro>
    */
    public define GetUpdated():
        [HasStatus(player,Status.Asleep),
        HasStatus(player,Status.Burning),
        HasStatus(player,Status.Frozen),
        HasStatus(player,Status.Hacked),
        HasStatus(player,Status.KnockedDown),
        HasStatus(player,Status.Rooted),
        HasStatus(player,Status.Stunned),
        PlayerState.ActualAlternateForm(player),
        PlayerState.ActualHeroBeingDuplicated(player),
        IsReloading(player),
        IsScoped(),
        IsInSpawnRoom(player),
        UltimateChargePercent(player) == 100];

    //*****************************************************//
    // private helper functions                            //
    //*****************************************************//

    /*
    *  @name        IsScopedHero
    *  @description Returns true if Hero can scope in / ADS
    *  <Macro>
    */
    private static define IsScopedHero(define ActingAs):
        IndexOfArrayValue([Hero.Widowmaker, Hero.Ashe, Hero.Ana], ActingAs) >= 0;

    


    //*****************************************************//
    // debugging / developer functions                     //
    //*****************************************************//

    /*
    *  @name        LogState
    *  @description Returns String with player state values for debugging
    *  
    */
    public define LogState()
    {
        return <"Changed <0>:~ a:<1> b:<2> f:<3> h:<4> kd:<5> r:<6> s:<7> af:<8> hd:<9> rld:<10> scp:<11> spwn:<12> hu:<13>",
                EventPlayer(), 
                PlayerStateArray[0], 
                PlayerStateArray[1],
                PlayerStateArray[2], 
                PlayerStateArray[3],
                PlayerStateArray[4], 
                PlayerStateArray[5],
                PlayerStateArray[6], 
                PlayerStateArray[7],
                PlayerStateArray[8],
                PlayerStateArray[9],
                PlayerStateArray[10],
                PlayerStateArray[11],
                PlayerStateArray[12],
                PlayerStateArray[13]>;
    }
}

/*
*  @name        PlayerStateEnum
*  @description Enum with name of information being stored in
*               Note: Enums are guaranteed to default to 0,1,...
*  <Enum>
*/
enum PlayerStateEnum
{
    IsAlseep,               //0
    IsBurning,              //1
    IsFrozen,               //2
    IsHacked,               //3
    IsKnockedDown,          //4
    IsRooted,               //5
    IsStunned,              //6
    IsInAlternateForm,      //7
    HeroBeingDuplicated,    //8
    IsReloading,            //9
    IsScoped,               //10
    InSpawn,                //11
    HasUlt                 //12
}